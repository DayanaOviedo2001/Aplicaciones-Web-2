// Función para crear un nuevo idioma
async function crearIdioma(descripcion) {
  const idioma = new Idioma({ descripcion });
  await idioma.save();
  return idioma;
}

// Función para obtener todos los idiomas
async function obtenerIdiomas() {
  const idiomas = await Idioma.find();
  return idiomas;
}

// Función para obtener un idioma por su ID
async function obtenerIdiomaPorId(id) {
  const idioma = await Idioma.findById(id);
  return idioma;
}

// Función para actualizar un idioma
async function actualizarIdioma(id, descripcion) {
  const idioma = await Idioma.findByIdAndUpdate(id, { descripcion }, { new: true });
  return idioma;
}

// Función para eliminar un idioma
async function eliminarIdioma(id) {
  await Idioma.findByIdAndDelete(id);
}

// Función para crear un nuevo instructor
async function crearInstructor(nombre, fechaNacimiento, experiencia) {
  const instructor = new Instructor({ nombre, fechaNacimiento, experiencia });
  await instructor.save();
  return instructor;
}

// Función para obtener todos los instructores
async function obtenerInstructores() {
  const instructores = await Instructor.find();
  return instructores;
}

// Función para obtener un instructor por su ID
async function obtenerInstructorPorId(id) {
  const instructor = await Instructor.findById(id);
  return instructor;
}

// Función para actualizar un instructor
async function actualizarInstructor(id, nombre, fechaNacimiento, experiencia) {
  const instructor = await Instructor.findByIdAndUpdate(id, { nombre, fechaNacimiento, experiencia }, { new: true });
  return instructor;
}

// Función para eliminar un instructor
async function eliminarInstructor(id) {
  await Instructor.findByIdAndDelete(id);
}
// Crear un nuevo idioma
crearIdioma('Inglés').then((idioma) => {
  console.log('Idioma creado:', idioma);
}).catch((error) => {
// CRUD de la entidad Instructor

const Instructor = require("./models/Instructor");

// Función para crear un nuevo instructor
const crearInstructor = async (datosInstructor) => {
  try {
    const nuevoInstructor = new Instructor(datosInstructor);
    await nuevoInstructor.save();
    console.log("Instructor creado correctamente");
  } catch (error) {
    console.log(error);
  }
};

// Función para actualizar los datos de un instructor existente
const actualizarInstructor = async (id, datosInstructor) => {
  try {
    await Instructor.findByIdAndUpdate(id, datosInstructor);
    console.log("Instructor actualizado correctamente");
  } catch (error) {
    console.log(error);
  }
};

// Función para eliminar un instructor existente
const eliminarInstructor = async (id) => {
  try {
    await Instructor.findByIdAndDelete(id);
    console.log("Instructor eliminado correctamente");
  } catch (error) {
    console.log(error);
  }
};

// Función para obtener todos los instructores
const obtenerInstructores = async () => {
  try {
    const instructores = await Instructor.find();
    console.log(instructores);
  } catch (error) {
    console.log(error);
  }
};
// Importar el modelo de Instructor
const Instructor = require("./models/Instructor");

// Crear un nuevo instructor
const datosInstructor = {
  nombre: "Juan Perez",
  fechaNacimiento: "1985-05-12",
  experiencia: 5,
};
crearInstructor(datosInstructor);

// Actualizar un instructor existente
const idInstructor = "6160c3f6b0f6bce66a49a4af";
const nuevosDatosInstructor = {
  nombre: "Juan Perez Ramirez",
  experiencia: 8,
};
actualizarInstructor(idInstructor, nuevosDatosInstructor);

// Eliminar un instructor existente
const idInstructor = "6160c3f6b0f6bce66a49a4af";
eliminarInstructor(idInstructor);

// Obtener todos los instructores
obtenerInstructores();
const mongoose = require('mongoose');

const instructorSchema = new mongoose.Schema({
  nombre: {
    type: String,
    required: true
  },
  fechaNacimiento: {
    type: Date,
    required: true
  },
  experiencia: {
    type: Number,
    required: true
  }
});

module.exports = mongoose.model('Instructor', instructorSchema);
const express = require('express');
const router = express.Router();
const instructorController = require('../controllers/instructorController');

router.post('/', instructorController.createInstructor);

module.exports = router;
const express = require('express');
const app = express();
const mongoose = require('mongoose');
const instructorRoutes = require('./routes/instructorRoutes');

mongoose.connect('mongodb://localhost:27017/idiomas', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('Conectado a la base de datos'))
.catch(err => console.error(err));

app.use(express.json());
app.use('/instructores', instructorRoutes);

app.listen(3000, () => console.log('Servidor iniciado'));
const express = require('express');
const router = express.Router();
const Aprendizaje = require('../models/aprendizaje');

// CREATE
router.post('/aprendizajes', async (req, res) => {
  const aprendizaje = new Aprendizaje(req.body);
  try {
    await aprendizaje.save();
    res.status(201).send(aprendizaje);
  } catch (error) {
    res.status(400).send(error);
  }
});

// READ (ALL)
router.get('/aprendizajes', async (req, res) => {
  try {
    const aprendizajes = await Aprendizaje.find({});
    res.send(aprendizajes);
  } catch (error) {
    res.status(500).send();
  }
});

// READ (ONE)
router.get('/aprendizajes/:id', async (req, res) => {
  const _id = req.params.id;
  try {
    const aprendizaje = await Aprendizaje.findById(_id);
    if (!aprendizaje) {
      return res.status(404).send();
    }
    res.send(aprendizaje);
  } catch (error) {
    res.status(500).send();
  }
});

// UPDATE
router.patch('/aprendizajes/:id', async (req, res) => {
  const updates = Object.keys(req.body);
  const allowedUpdates = ['id_idioma', 'id_instructor', 'fecha', 'hora', 'num_horas_curso', 'nivel'];
  const isValidOperation = updates.every(update => allowedUpdates.includes(update));
  if (!isValidOperation) {
    return res.status(400).send({ error: 'Invalid updates!' });
  }
  try {
    const aprendizaje = await Aprendizaje.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
    if (!aprendizaje) {
      return res.status(404).send();
    }
    res.send(aprendizaje);
  } catch (error) {
    res.status(400).send(error);
  }
});

// DELETE
router.delete('/aprendizajes/:id', async (req, res) => {
  try {
    const aprendizaje = await Aprendizaje.findByIdAndDelete(req.params.id);
    if (!aprendizaje) {
      return res.status(404).send();
    }
    res.send(aprendizaje);
  } catch (error) {
    res.status(500).send();
  }
});

module.exports = router;
// Importamos los modelos de Mongoose y establecemos la conexión con la base de datos
const mongoose = require('mongoose');
const { idiomaModel, instructorModel, aprendizajeModel } = require('./models');
mongoose.connect('URL_DE_CONEXIÓN_A_MONGODB_ATLAS', { useNewUrlParser: true });

// Listar los idiomas registrados en la base de datos
idiomaModel.find({}, (err, idiomas) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log('Idiomas registrados:');
  idiomas.forEach((idioma) => {
    console.log(`- ${idioma.id} - ${idioma.descripcion}`);
  });
});

// Listar los instructores registrados en la base de datos
instructorModel.find({}, (err, instructores) => {
  if (err) {
    console.error(err);
    return;
  }
  console.log('Instructores registrados:');
  instructores.forEach((instructor) => {
    console.log(`- ${instructor.id} - ${instructor.nombre}`);
  });
});

// Listar los aprendizajes registrados en la base de datos, incluyendo los datos de idioma e instructor relacionados
aprendizajeModel.find({})
  .populate('idioma', 'descripcion')
  .populate('instructor', 'nombre')
  .exec((err, aprendizajes) => {
    if (err) {
      console.error(err);
      return;
    }
    console.log('Aprendizajes registrados:');
    aprendizajes.forEach((aprendizaje) => {
      console.log(`- ${aprendizaje.id} - ${aprendizaje.idioma.descripcion} - ${aprendizaje.instructor.nombre} - ${aprendizaje.fecha} - ${aprendizaje.hora} - ${aprendizaje.numHoras} - ${aprendizaje.nivel}`);
    });
    // Cerramos la conexión con la base de datos al finalizar la consulta
    mongoose.connection.close();
  });
